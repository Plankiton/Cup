#!/bin/python3
from sys import argv as a, stderr
from os import popen

def exec(*a):
    return popen(" ".join(a))

def err(*s):
    print("!!", " ".join(s), file=stderr)
    exit(1)

def type_name(t):
    return {
        int: "inteiro",
        bool: "boolean (true|false)",
        str: "string",
        list: "list",
    }[t]    

def help(title, cmds):
    print(f":: {a[0]} Configuration")
    print(f" > {title}")
    for cmd in cmds:
        print(f'  {cmd},{cmds[cmd]["alt"].ljust(20)}\t{type_name(cmds[cmd]["type"])}\t{"ex: "+cmds[cmd]["example"] if "example" in cmds[cmd] else ""}')
    exit(0)

def cp(src, dst):
    print(f":: Copying {src} to {dst}")
    print(f" > cp {src} {dst}")
    print(exec(f"cp -rfv {src} {dst} 2> /dev/stdout").read())

def hidde_spaces(s):
    chars = [
        (r"\ ", "&spc;"),
        (r"\"", '&asp;'),
    ]
    for c, v in chars:
        s = s.replace(c, v)
    return s

def fix_spaces(s):
    chars = [
        ("&spc;", " "),
        ("&asp;", '"'),
    ]
    for c, v in chars:
        s = s.replace(v, "")
        s = s.replace(c, v)
    return s

def parse_args(commands, args):
    i = 0
    of_to = { commands[k]["alt"]:k for k in commands }
    for cmd in args:
        if cmd in of_to:
            cmd = of_to[cmd]

        if cmd not in commands:
            err(f"The argument {cmd} was not found")
            
        if commands[cmd]["type"] == bool:
            commands[cmd]["value"] = True
        else:
            if (len(args)-1) < i+1:
                err("What is the value of", cmd, "argument?")
            try:
                if commands[cmd]["type"] == list:
                    if not commands[cmd]["value"]:
                        commands[cmd]["value"] = []
                    commands[cmd]["value"].append(args[i+1])
                else:
                    commands[cmd]["value"] = commands[cmd]["type"](args[i+1])
                args.pop(i+1)
            except Exception as e:
                err(f"Occurred an error parsing {cmd} argument: ", e)
        if "drop" in commands[cmd]:
            if commands[cmd]["drop"]:
                return commands

        i += 1
    return commands

def dotfiles(args):
    commands = parse_args({
                              "-i": {
                                  "type": bool,
                                  "value": False,
                                  "alt": "--install",
                              },

                              "-h": {
                                  "type": bool,
                                  "value": False,
                                  "alt": "--help",
                                  "drop": True,
                              },

                              "-u": {
                                  "type": bool,
                                  "value": False,
                                  "alt": "--update"
                              },

                              "-p": {
                                  "type": list,
                                  "value": False,
                                  "alt": "--package"
                              },

                              "-d": {
                                  "type": str,
                                  "value": None,
                                  "alt": "--pkg-install-cmd"
                              },

                              "-e": {
                                  "type": list,
                                  "value": None,
                                  "alt": "--execute",
                                  "example": "-e cmd -e cmd",
                              },

                              "-eu": {
                                  "type": list,
                                  "value": None,
                                  "alt": "--execute-on-update",
                                  "example": "-eu cmd -eu cmd",
                              },

                              "-r": {
                                  "type": str,
                                  "value": None,
                                  "alt": "--pkg-remove-cmd",
                              },

                              "-m": {
                                  "type": list,
                                  "value": None,
                                  "alt": "--src-dst-map",
                                  "example": "-m src,dst -m src2,dst2",
                              },
                          }, args)

    if commands["-h"]["value"]:
        help("DotFiles Manager", commands)

    if commands["-i"]["value"]:
        if commands["-u"]["value"]:
            err("You cant use -i and -u together")

        if commands["-m"]["value"]:
            try:
                for src, dst in [(i.split(",")[0], i.split(",")[1]) for i in commands["-m"]["value"]]:
                    cp(src, dst)
            except Exception as e:
                err(f"Occurred an error parsing -m argument: ", e)

        if commands["-e"]["value"]:
            print(":: Executing commands")
            for exec_cmd in commands["-e"]["value"]:
               print(exec(exec_cmd + " 2>> /dev/stdout").read())

        if commands["-p"]["value"]:
            pkg_install_cmd = commands["-d"]["value"]
            if not pkg_install_cmd:
                err("-d is required")  
            
            print(":: Installing packages")
            print(f' -> {pkg_install_cmd} {" ".join(commands["-p"]["value"])}')
            print(exec(f'{pkg_install_cmd} {" ".join(commands["-p"]["value"])}').read())

        return
    if commands["-u"]["value"]:
        if commands["-i"]["value"]:
            err("You cant use -i and -u together")

        if commands["-m"]["value"]:
            try:
                for dst, src in [(i.split(",")[0], i.split(",")[1]) for i in commands["-m"]["value"]]:
                    cp(src, dst)
            except Exception as e:
                err(f"Occurred an error parsing -m argument: ", e)

        if commands["-eu"]["value"]:
            print(":: Executing Reverse commands")
            for exec_cmd in commands["-eu"]["value"]:
               print(exec(exec_cmd + " 2>> /dev/stdout").read())

        if commands["-p"]["value"]:
            pkg_remove_cmd = commands["-r"]["value"]
            if not pkg_remove_cmd:
                err("-r is required")  
            
            print(":: Installing packages")
            print(f' -> {pkg_remove_cmd} {" ".join(commands["-p"]["value"])}')
            print(exec(f'{pkg_remove_cmd} {" ".join(commands["-p"]["value"])}').read())

def config(commands, cmd_list):
    args = []
    of_to = { commands[k]["alt"]:k for k in commands }
    if commands["c"]["value"]:
        with open(commands["c"]["value"]) as config:
            for txt in config.readlines():
                if txt[0] == "#":
                    continue
                txt = hidde_spaces(txt).split(" ")
                for a in txt:
                    if a[0] == "#":
                        break
                    if a in of_to:
                        a = of_to[a]

                    if a in cmd_list:
                        break
                    if len(fix_spaces(a.strip())) == 0:
                        break
                    args.append(fix_spaces(a.strip()))
        print(":: Loading configuration")
        print(" > "+ " ".join(args))
        commands["c"]["value"] = None
    return parse_args(commands, args), args

if __name__ == "__main__":
    commands = parse_args({
                              "df": {
                                  "value": False,
                                  "type": bool,
                                  "alt": "dotfiles",
                                  "drop": True,
                              },
                              "c": {
                                  "value": None,
                                  "type": str,
                                  "alt": "config",
                                  "drop": True,
                              },
                              "u": {
                                  "value": False,
                                  "type": bool,
                                  "alt": "update",
                                  "drop": True,
                              },
                              "h": {
                                  "value": False,
                                  "type": bool,
                                  "alt": "help",
                                  "drop": True,
                              },
                          }, a[1:])
    commands, args = config(commands, [cmd for cmd in commands]) 
    if commands["df"]["value"]:
        dotfiles(args[1:])
    elif commands["h"]["value"]:
        help("Command Manager", commands)
    else:
        err("Command not found, try h or help")
